
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" general plug
" {
    "Plug 'bagrat/vim-buffet'
    " config {
    
    " }


    Plug 'scrooloose/nerdtree'
    " config {
        " open nerdtree automatically when vim starts up
        "autocmd vimenter * NERDTree
        
        " open a NERDTree automatically when vim starts up if no files were specified
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
        
        " open NERDTree automatically when vim starts up on opening a directory
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
        
        " toggle (default jump to the nerdtree window)
        "map <leader>e :NERDTreeToggle<CR>
        
        " toggle (jump back to the file window)
        map <leader>e :NERDTreeToggle<CR>:wincmd p<CR>
     
        " close vim if the only window left open is a NERDTree
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        
        " change default arrows
        let g:NERDTreeDirArrowExpandable = '▸'
        let g:NERDTreeDirArrowCollapsible = '▾'
        
        " change default nerdtree window size
        let g:NERDTreeWinSize=20
    " }
    "  
    " usage {
        "press <Enter> to open new file in buffer
        "press "t" to open new file in a new tab
    " }
   
    Plug 'Nopik/vim-nerdtree-direnter'
    " config {
        " allow nerdtree to use <ENTER> to open file in a new tab
        let NERDTreeMapOpenInTab='<ENTER>'
    " } 

    Plug 'itchyny/lightline.vim'
    " config {
		let g:lightline = {
      		\ 'colorscheme': 'jellybeans',
      		\ 'active': {
      		\   'right': [ [ 'lineinfo' ],
      		\              [ 'percent' ],
      		\              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
      		\ },
      		\ 'component': {
      		\   'charvaluehex': '0x%B'
      		\ },
      		\ }
    " }


    Plug 'tpope/vim-surround'
    "config {
    " 
    "}
    "
    "usage{
        " change surrounding
        "   `cs'"`      => change ' to "
        
        " delete surrounding
        "   `ds"`       => remove "
            
        " you surrounding
        "   `ysiw"`     => add "
    "}


    "Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    "Plug 'junegunn/fzf.vim'
   
    "Plug 'SirVer/utisnips'
    "Plug 'honza/vim-snippets'
    " config {
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        "let g:UltiSnipsExpandTrigger="<tab>"
        "let g:UltiSnipsJumpForwardTrigger="<c-b>"
        "let g:UltiSnipsJumpBackwardTrigger="<c-z>"

        " If you want :UltiSnipsEdit to split your window.
        "let g:UltiSnipsEditSplit="vertical"
    " }
    
    "Plug 'wting/gitsessions.vim'
    " config {
    " }
    
    Plug 'terryma/vim-multiple-cursors'
    " config {
    " 
        " if installed Neocomplete, uncomment following 
        " {
            "function! Multiple_cursors_before()
            "    if exists(':NeoCompleteLock')==2
            "        exe 'NeoCompleteLock'
            "    endif
            "endfunction
            "
            "function! Multiple_cursors_after()
            "    if exists(':NeoCompleteUnlock')==2
            "        exe 'NeoCompleteUnlock'
            "    endif
            "endfunction
        " }
    " }
    "
    " usage{
	    " start: <C-n> start multicursor and add a virtual cursor + selection on the match
        " next:  <C-n> add a new virtual cursor + selection on the next match
        " skip:  <C-x> skip the next match
        " prev:  <C-p> remove current virtual cursor + selection and go back on previous match
        " select all: <A-n> start muticursor and directly select all matches 
    " }
    
    Plug 'Valloric/YouCompleteMe'
    " config {
        let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'

        " allow ycm to autocomplete html/css by combining with built-in Omnicomplete html/css autocompletion
        "let g:ycm_semantic_triggers = {
        "    \   'scss,sass,css': [ 're!^\s{4}', 're!:\s+' ],
         "   \   'html': ['<', '"', '</', ' '],
         "   \ }

         " disable preview window
         :set completeopt-=preview

         " auto close preview window after leaving insert mode
         "let g:ycm_autoclose_preview_window_after_insertion = 1

    " }
    
 
    Plug 'easymotion/vim-easymotion'
    " leader key is \
    " config {
        let g:EasyMotion_smartcase = 1
        let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
        map <Leader><leader>h <Plug>(easymotion-linebackward)
        map <Leader><Leader>j <Plug>(easymotion-j)
        map <Leader><Leader>k <Plug>(easymotion-k)
        map <Leader><leader>l <Plug>(easymotion-lineforward)
        " 重复上一次操作, 类似repeat插件, 很强大
        map <Leader><leader>. <Plug>(easymotion-repeat)
    " }
    "
    " usage {
        "<leader> <leader> w
        "<leader> <leader> b
        "<leader> <leader> s
        "
    " }
    
    Plug 'mbbill/undotree'
    " config {
        " toggle
        nnoremap <leader>u :UndotreeToggle<cr>

        " set window size
        let g:undotree_SplitWidth = 30

        " automatically focus to undotree window after toggle
        let g:undotree_SetFocusWhenToggle = 1
    " }
    
    Plug 'senderle/restoreview'
    " config {
    " }
   
    "Plug 'gcmt/wildfire.vim'
    " config {
		" This selects the next closest text object.
		"map <ENTER> <Plug>(wildfire-fuel)

		" This selects the previous closest text object.
		"vmap <BS> <Plug>(wildfire-water)
    " }
    
   
    Plug 'Yggdroot/indentLine' 
    " config {
          " change indent char
          let g:indentLine_char = '¦'

          " toggle
          nnoremap <leader>i :IndentLinesToggle<cr>
     " }

" }

" programming plug
" {
    Plug 'majutsushi/tagbar'
    " depending on ctags ( $ apt install ctags )    
    " config {

          " toggle
          nmap <leader>t :TagbarToggle<cr>
        
          " set window on left side
          let g:tagbar_left = 0 
        
          " set window size
          let g:tagbar_width = 40

          " auto focus to the windows
          let g:tagbar_autofocus = 1
    
          " do not sort tags
          let g:tagbar_sort = 0
    " }
    
    "Plug 'chazy/cscope_maps'
    " config {
    " }
    "
    " usage {
    "   $ cscope -Rqb 
    "
    "   find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
    "          c: Find functions calling this function
    "          d: Find functions called by this function
    "          e: Find this egrep pattern
    "          f: Find this file
    "          g: Find this definition
    "          i: Find files #including this file
    "          s: Find this C symbol
    "          t: Find this
    "          text string
    "
    "   move cursor to a target statement and press Ctrl + \ + c|d|e|f|g|i|s|t
    "   move cursor to a function and press Ctrl + ] , it will jump to the definition, Ctrl + T return
    " }
 
    Plug 'wesleyche/SrcExpl'
    " config {
    	" // The switch of the Source Explorer 
     	nmap <leader>s :SrcExplToggle<CR> 
    
        " // Set the height of Source Explorer window 
        let g:SrcExpl_winHeight = 8 
        
        " // Set 100 ms for refreshing the Source Explorer 
        let g:SrcExpl_refreshTime = 100 
        
        " // Set "Enter" key to jump into the exact definition context 
        "let g:SrcExpl_jumpKey = "<ENTER>" 
        
        " // Set "Space" key for back from the definition context 
        "let g:SrcExpl_gobackKey = "<SPACE>" 
        
        " // In order to avoid conflicts, the Source Explorer should know what plugins except
        " // itself are using buffers. And you need add their buffer names into below list
        " // according to the command ":buffers!"
        let g:SrcExpl_pluginList = ["__Tag_List__", "_NERD_tree_", "Source_Explorer"]
        
        " // The color schemes used by Source Explorer. There are five color schemes
        " // supported for now - Red, Cyan, Green, Yellow and Magenta. Source Explorer
        " // will pick up one of them randomly when initialization.
        let g:SrcExpl_colorSchemeList = ["Red", "Cyan", "Green", "Yellow", "Magenta"]
        
        " // Enable/Disable the local definition searching, and note that this is not 
        " // guaranteed to work, the Source Explorer doesn't check the syntax for now. 
        " // It only searches for a match with the keyword according to command 'gd' 
        let g:SrcExpl_searchLocalDef = 1 
        
        " // Workaround for Vim bug @https://goo.gl/TLPK4K as any plugins using autocmd for
        " // BufReadPre might have conflicts with Source Explorer. e.g. YCM, Syntastic etc.
        let g:SrcExpl_nestedAutoCmd = 1
        
        " // Do not let the Source Explorer update the tags file when opening 
        let g:SrcExpl_isUpdateTags = 0 
        
        " // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
        " // create/update the tags file 
        let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
        
        " // Set "<F12>" key for updating the tags file artificially 
        "let g:SrcExpl_updateTagsKey = "<F12>" 
        
        " // Set "<F11>" key for displaying the previous definition in the jump list 
        "let g:SrcExpl_prevDefKey = "<F11>" 
        
        " // Set "<F10>" key for displaying the next definition in the jump list 
        "let g:SrcExpl_nextDefKey = "<F10>"   
    " }

    "Plug 'w0rp/ale' 
    " better than syntastic, but vim 8 is required !!
    " config {
    " }
    
    Plug 'vim-syntastic/syntastic'
    " config {
        " recommanded settings
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 0
        let g:syntastic_check_on_wq = 0
    
        " add support to python
        let g:syntastic_python_checkers = ['pylint']
        let g:syntastic_python_python_exe = 'python3'
    
        " disable warning
        let g:syntastic_quiet_messages={'level':'warningis'}
	
	    " toggle
        nmap <leader>r :call SyntasticToggle()<CR>
        let g:syntastic_is_open = 0
        function! SyntasticToggle()
           if g:syntastic_is_open == 1
               SyntasticReset
               let g:syntastic_is_open = 0
           else
               SyntasticCheck
               let g:syntastic_is_open = 1
           endif
        endfunction
    " }
    
    " usage {
    "   :lnext     = jump to next error
    "   :lprevious = jump to previous error
    "
    "   :lopen     = open location window
    "   :lclose    = close location window
    " }


    Plug 'scrooloose/nerdcommenter'
    " config {
    	" default leader key
        "let mapleader='\'

    	" Add spaces after comment delimiters by default
		let g:NERDSpaceDelims = 0
		
		" Use compact syntax for prettified multi-line comments
		let g:NERDCompactSexyComs = 1
		
		" Align line-wise comment delimiters flush left instead of following code indentation
		let g:NERDDefaultAlign = 'left'
		
		" Set a language to use its alternate delimiters by default
		let g:NERDAltDelims_java = 1
		
		" Add your own custom formats or override the defaults
		let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
		
		" Allow commenting and inverting empty lines (useful when commenting a region)
		let g:NERDCommentEmptyLines = 1
		
		" Enable trimming of trailing whitespace when uncommenting
		let g:NERDTrimTrailingWhitespace = 1
		
		" Enable NERDCommenterToggle to check all selected lines is commented or not 
		let g:NERDToggleCheckAllLines = 1
    " }
    "
    " usage {
    "	<leader> c <space> ==> comment/uncomment
    " }

    Plug 'junegunn/vim-easy-align'
    " config {
     	" Start interactive EasyAlign in visual mode (e.g. vipga)
     	xmap ga <Plug>(EasyAlign)
    
     	" Start interactive EasyAlign for a motion/text object (e.g. gaip)
     	nmap ga <Plug>(EasyAlign)
    " }
    "
    " usage {
    " 	select block, press 'ga' 
    " 		press `=`, it will align via the first =
    " 		press `2=`, it will align via the second =
    " }

"}

" python plug
" {
"   "Plug python_match
" }

" Initialize plugin system
call plug#end()
filetype indent off " avoid vim-plug to auto indent
